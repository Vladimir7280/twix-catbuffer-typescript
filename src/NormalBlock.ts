/*
 * Copyright 2021 SYMBOL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Address } from './Address';
import { BlockCollectedEpochFees } from './BlockCollectedEpochFees';
import { BlockFeeMultiplier } from './BlockFeeMultiplier';
import { BlockFeeToPay } from './BlockFeeToPay';
import { BlockInflation } from './BlockInflation';
import { BlockInflationMultiplier } from './BlockInflationMultiplier';
import { BlockTotalSupply } from './BlockTotalSupply';
import { BlockType } from './BlockType';
import { Difficulty } from './Difficulty';
import { Hash256 } from './Hash256';
import { Height } from './Height';
import { NetworkType } from './NetworkType';
import { PublicKey } from './PublicKey';
import { Serializer } from './Serializer';
import { Signature } from './Signature';
import { Timestamp } from './Timestamp';
import { Transaction } from './Transaction';
import { Utils } from './Utils';
import { VrfProof } from './VrfProof';

/**
 * Interface to create instances of NormalBlock
 */
export interface NormalBlockParams {
    /**
     * Entity's signature generated by the signing account.
     */
    signature: Signature;
    /**
     * Public key of the signer of the entity.
     */
    signerPublicKey: PublicKey;
    /**
     * Version of this structure.
     */
    version: number;
    /**
     * Network on which this entity was created.
     */
    network: NetworkType;
    /**
     * block type
     */
    type: BlockType;
    /**
     * block height
     */
    height: Height;
    /**
     * number of milliseconds elapsed since creation of nemesis block
     */
    timestamp: Timestamp;
    /**
     * block difficulty
     */
    difficulty: Difficulty;
    /**
     * generation hash proof
     */
    generationHashProof: VrfProof;
    /**
     * previous block hash
     */
    previousBlockHash: Hash256;
    /**
     * hash of the transactions in this block
     */
    transactionsHash: Hash256;
    /**
     * hash of the receipts generated by this block
     */
    receiptsHash: Hash256;
    /**
     * hash of the global chain state at this block
     */
    stateHash: Hash256;
    /**
     * beneficiary address designated by harvester
     */
    beneficiaryAddress: Address;
    /**
     * fee multiplier applied to block transactions
     */
    feeMultiplier: BlockFeeMultiplier;
    /**
     * totalSupply applied to block transactions
     */
    totalSupply: BlockTotalSupply;
    /**
     * feeToPay applied to block transactions
     */
    feeTopay: BlockFeeToPay;
    /**
     * inflation applied to block transactions
     */
    inflation: BlockInflation;
    /**
     * collectedEpochFees applied to block transactions
     */
    collectedEpochFees: BlockCollectedEpochFees;
    /**
     * inflationMultiplier applied to block transactions
     */
    inflationMultiplier: BlockInflationMultiplier;
    /**
     * variable sized transaction data
     */
    transactions: Transaction[];
}

/**
 * binary layout for a normal block header
 */
export class NormalBlock implements Serializer {
    /**
     * BLOCK_VERSION
     */
    public readonly BLOCK_VERSION = 1;
    /**
     * BLOCK_TYPE
     */
    public readonly BLOCK_TYPE = 33091;
    /**
     * Entity's signature generated by the signing account.
     */
    public readonly signature: Signature;
    /**
     * Public key of the signer of the entity.
     */
    public readonly signerPublicKey: PublicKey;
    /**
     * Version of this structure.
     */
    public readonly version: number;
    /**
     * Network on which this entity was created.
     */
    public readonly network: NetworkType;
    /**
     * block type
     */
    public readonly type: BlockType;
    /**
     * block height
     */
    public readonly height: Height;
    /**
     * number of milliseconds elapsed since creation of nemesis block
     */
    public readonly timestamp: Timestamp;
    /**
     * block difficulty
     */
    public readonly difficulty: Difficulty;
    /**
     * generation hash proof
     */
    public readonly generationHashProof: VrfProof;
    /**
     * previous block hash
     */
    public readonly previousBlockHash: Hash256;
    /**
     * hash of the transactions in this block
     */
    public readonly transactionsHash: Hash256;
    /**
     * hash of the receipts generated by this block
     */
    public readonly receiptsHash: Hash256;
    /**
     * hash of the global chain state at this block
     */
    public readonly stateHash: Hash256;
    /**
     * beneficiary address designated by harvester
     */
    public readonly beneficiaryAddress: Address;
    /**
     * fee multiplier applied to block transactions
     */
    public readonly feeMultiplier: BlockFeeMultiplier;
    /**
     * totalSupply applied to block transactions
     */
    public readonly totalSupply: BlockTotalSupply;
    /**
     * feeToPay applied to block transactions
     */
    public readonly feeTopay: BlockFeeToPay;
    /**
     * inflation applied to block transactions
     */
    public readonly inflation: BlockInflation;
    /**
     * collectedEpochFees applied to block transactions
     */
    public readonly collectedEpochFees: BlockCollectedEpochFees;
    /**
     * inflationMultiplier applied to block transactions
     */
    public readonly inflationMultiplier: BlockInflationMultiplier;
    /**
     * variable sized transaction data
     */
    public readonly transactions: Transaction[];

    /**
     * Constructor
     * @param signature - Entity's signature generated by the signing account.
     * @param signerPublicKey - Public key of the signer of the entity.
     * @param version - Version of this structure.
     * @param network - Network on which this entity was created.
     * @param type - block type
     * @param height - block height
     * @param timestamp - number of milliseconds elapsed since creation of nemesis block
     * @param difficulty - block difficulty
     * @param generationHashProof - generation hash proof
     * @param previousBlockHash - previous block hash
     * @param transactionsHash - hash of the transactions in this block
     * @param receiptsHash - hash of the receipts generated by this block
     * @param stateHash - hash of the global chain state at this block
     * @param beneficiaryAddress - beneficiary address designated by harvester
     * @param feeMultiplier - fee multiplier applied to block transactions
     * @param totalSupply - totalSupply applied to block transactions
     * @param feeTopay - feeToPay applied to block transactions
     * @param inflation - inflation applied to block transactions
     * @param collectedEpochFees - collectedEpochFees applied to block transactions
     * @param inflationMultiplier - inflationMultiplier applied to block transactions
     * @param transactions - variable sized transaction data
     */
    constructor({
        signature,
        signerPublicKey,
        version,
        network,
        type,
        height,
        timestamp,
        difficulty,
        generationHashProof,
        previousBlockHash,
        transactionsHash,
        receiptsHash,
        stateHash,
        beneficiaryAddress,
        feeMultiplier,
        totalSupply,
        feeTopay,
        inflation,
        collectedEpochFees,
        inflationMultiplier,
        transactions,
    }: NormalBlockParams) {
        this.signature = signature;
        this.signerPublicKey = signerPublicKey;
        this.version = version;
        this.network = network;
        this.type = type;
        this.height = height;
        this.timestamp = timestamp;
        this.difficulty = difficulty;
        this.generationHashProof = generationHashProof;
        this.previousBlockHash = previousBlockHash;
        this.transactionsHash = transactionsHash;
        this.receiptsHash = receiptsHash;
        this.stateHash = stateHash;
        this.beneficiaryAddress = beneficiaryAddress;
        this.feeMultiplier = feeMultiplier;
        this.totalSupply = totalSupply;
        this.feeTopay = feeTopay;
        this.inflation = inflation;
        this.collectedEpochFees = collectedEpochFees;
        this.inflationMultiplier = inflationMultiplier;
        this.transactions = transactions;
    }

    /**
     * Creates an instance of NormalBlock from binary payload
     * @param payload - byte payload to use to serialize the object
     * @returns Creates an instance of NormalBlock from binary payload
     */
    public static deserialize(payload: Uint8Array): NormalBlock {
        const byteArray = Array.from(payload);
        const size = Utils.bufferToUint32(Uint8Array.from(byteArray));
        byteArray.splice(0, 4);
        Utils.bufferToUint32(Uint8Array.from(byteArray));
        byteArray.splice(0, 4);
        const signature = Signature.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, signature.size);
        const signerPublicKey = PublicKey.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, signerPublicKey.size);
        Utils.bufferToUint32(Uint8Array.from(byteArray));
        byteArray.splice(0, 4);
        const version = Utils.bufferToUint8(Uint8Array.from(byteArray));
        byteArray.splice(0, 1);
        const network = Utils.bufferToUint8(Uint8Array.from(byteArray));
        byteArray.splice(0, 1);
        const type = Utils.bufferToUint16(Uint8Array.from(byteArray));
        byteArray.splice(0, 2);
        const height = Height.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, height.size);
        const timestamp = Timestamp.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, timestamp.size);
        const difficulty = Difficulty.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, difficulty.size);
        const generationHashProof = VrfProof.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, generationHashProof.size);
        const previousBlockHash = Hash256.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, previousBlockHash.size);
        const transactionsHash = Hash256.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, transactionsHash.size);
        const receiptsHash = Hash256.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, receiptsHash.size);
        const stateHash = Hash256.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, stateHash.size);
        const beneficiaryAddress = Address.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, beneficiaryAddress.size);
        const feeMultiplier = BlockFeeMultiplier.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, feeMultiplier.size);
        const totalSupply = BlockTotalSupply.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, totalSupply.size);
        const feeTopay = BlockFeeToPay.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, feeTopay.size);
        const inflation = BlockInflation.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, inflation.size);
        const collectedEpochFees = BlockCollectedEpochFees.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, collectedEpochFees.size);
        const inflationMultiplier = BlockInflationMultiplier.deserialize(Uint8Array.from(byteArray));
        byteArray.splice(0, inflationMultiplier.size);
        Utils.bufferToUint32(Uint8Array.from(byteArray));
        byteArray.splice(0, 4);
        const transactions: Transaction[] = Utils.deserializeRemaining(
            Transaction.deserialize,
            Uint8Array.from(byteArray),
            byteArray.length,
            0,
        );
        byteArray.splice(0, transactions.reduce((sum, c) => sum + Utils.getSizeWithPadding(c.size, 0), 0));
        return new NormalBlock({
            signature: signature,
            signerPublicKey: signerPublicKey,
            version: version,
            network: network,
            type: type,
            height: height,
            timestamp: timestamp,
            difficulty: difficulty,
            generationHashProof: generationHashProof,
            previousBlockHash: previousBlockHash,
            transactionsHash: transactionsHash,
            receiptsHash: receiptsHash,
            stateHash: stateHash,
            beneficiaryAddress: beneficiaryAddress,
            feeMultiplier: feeMultiplier,
            totalSupply: totalSupply,
            feeTopay: feeTopay,
            inflation: inflation,
            collectedEpochFees: collectedEpochFees,
            inflationMultiplier: inflationMultiplier,
            transactions: transactions,
        });
    }

    /**
     * Gets the size of the object
     * @returns Gets the size of the object
     */
    public get size(): number {
        let size = 0;
        size += 4; // size;
        size += 4; // verifiableEntityHeaderReserved_1;
        size += this.signature.size; // signature;
        size += this.signerPublicKey.size; // signerPublicKey;
        size += 4; // entityBodyReserved_1;
        size += 1; // version;
        size += 1; // network;
        size += 2; // type;
        size += this.height.size; // height;
        size += this.timestamp.size; // timestamp;
        size += this.difficulty.size; // difficulty;
        size += this.generationHashProof.size; // generationHashProof;
        size += this.previousBlockHash.size; // previousBlockHash;
        size += this.transactionsHash.size; // transactionsHash;
        size += this.receiptsHash.size; // receiptsHash;
        size += this.stateHash.size; // stateHash;
        size += this.beneficiaryAddress.size; // beneficiaryAddress;
        size += this.feeMultiplier.size; // feeMultiplier;
        size += this.totalSupply.size; // totalSupply;
        size += this.feeTopay.size; // feeTopay;
        size += this.inflation.size; // inflation;
        size += this.collectedEpochFees.size; // collectedEpochFees;
        size += this.inflationMultiplier.size; // inflationMultiplier;
        size += 4; // blockHeaderReserved_1;
        size += this.transactions.reduce((sum, c) => sum + Utils.getSizeWithPadding(c.size, 0), 0); // transactions;
        return size;
    }

    /**
     * Serializes an object to bytes
     * @returns Serializes an object to bytes
     */
    public serialize(): Uint8Array {
        let newArray = new Uint8Array();
        const sizeBytes = Utils.uint32ToBuffer(this.size);
        newArray = Utils.concatTypedArrays(newArray, sizeBytes);
        const verifiableEntityHeaderReserved_1Bytes = Utils.uint32ToBuffer(0);
        newArray = Utils.concatTypedArrays(newArray, verifiableEntityHeaderReserved_1Bytes);
        const signatureBytes = this.signature.serialize();
        newArray = Utils.concatTypedArrays(newArray, signatureBytes);
        const signerPublicKeyBytes = this.signerPublicKey.serialize();
        newArray = Utils.concatTypedArrays(newArray, signerPublicKeyBytes);
        const entityBodyReserved_1Bytes = Utils.uint32ToBuffer(0);
        newArray = Utils.concatTypedArrays(newArray, entityBodyReserved_1Bytes);
        const versionBytes = Utils.uint8ToBuffer(this.version);
        newArray = Utils.concatTypedArrays(newArray, versionBytes);
        const networkBytes = Utils.uint8ToBuffer(this.network);
        newArray = Utils.concatTypedArrays(newArray, networkBytes);
        const typeBytes = Utils.uint16ToBuffer(this.type);
        newArray = Utils.concatTypedArrays(newArray, typeBytes);
        const heightBytes = this.height.serialize();
        newArray = Utils.concatTypedArrays(newArray, heightBytes);
        const timestampBytes = this.timestamp.serialize();
        newArray = Utils.concatTypedArrays(newArray, timestampBytes);
        const difficultyBytes = this.difficulty.serialize();
        newArray = Utils.concatTypedArrays(newArray, difficultyBytes);
        const generationHashProofBytes = this.generationHashProof.serialize();
        newArray = Utils.concatTypedArrays(newArray, generationHashProofBytes);
        const previousBlockHashBytes = this.previousBlockHash.serialize();
        newArray = Utils.concatTypedArrays(newArray, previousBlockHashBytes);
        const transactionsHashBytes = this.transactionsHash.serialize();
        newArray = Utils.concatTypedArrays(newArray, transactionsHashBytes);
        const receiptsHashBytes = this.receiptsHash.serialize();
        newArray = Utils.concatTypedArrays(newArray, receiptsHashBytes);
        const stateHashBytes = this.stateHash.serialize();
        newArray = Utils.concatTypedArrays(newArray, stateHashBytes);
        const beneficiaryAddressBytes = this.beneficiaryAddress.serialize();
        newArray = Utils.concatTypedArrays(newArray, beneficiaryAddressBytes);
        const feeMultiplierBytes = this.feeMultiplier.serialize();
        newArray = Utils.concatTypedArrays(newArray, feeMultiplierBytes);
        const totalSupplyBytes = this.totalSupply.serialize();
        newArray = Utils.concatTypedArrays(newArray, totalSupplyBytes);
        const feeTopayBytes = this.feeTopay.serialize();
        newArray = Utils.concatTypedArrays(newArray, feeTopayBytes);
        const inflationBytes = this.inflation.serialize();
        newArray = Utils.concatTypedArrays(newArray, inflationBytes);
        const collectedEpochFeesBytes = this.collectedEpochFees.serialize();
        newArray = Utils.concatTypedArrays(newArray, collectedEpochFeesBytes);
        const inflationMultiplierBytes = this.inflationMultiplier.serialize();
        newArray = Utils.concatTypedArrays(newArray, inflationMultiplierBytes);
        const blockHeaderReserved_1Bytes = Utils.uint32ToBuffer(0);
        newArray = Utils.concatTypedArrays(newArray, blockHeaderReserved_1Bytes);
        const transactionsBytes = Utils.writeList(this.transactions, 0);
        newArray = Utils.concatTypedArrays(newArray, transactionsBytes);
        return newArray;
    }
}
